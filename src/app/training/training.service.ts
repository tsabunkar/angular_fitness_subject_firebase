import { Injectable } from '@angular/core';
import { Exercise } from './exercise.model';
import { mockExercises } from '../core/mocks/exercise.mock';
import { Subject, Observable, of } from 'rxjs';
import { AngularFirestore } from '@angular/fire/firestore';
import { map, tap } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class TrainingService {
  // private avaliableExercises: Exercise[] = mockExercises;
  // !Getting Data from Firebase Db
  private avaliableExercises: Exercise[];

  private currentlyRunningExercise: Exercise;
  private completedHistoryExercises: Exercise[] = [];

  public exerciseChanged = new Subject<Exercise>();
  public historyChanged = new Subject<Exercise[]>();

  constructor(
    private db: AngularFirestore // *C.I for ANgularFire
  ) { }

  public getAvaliableExercise(): Exercise[] {
    return this.avaliableExercises.slice();
    // return [...this.avaliableExercises];
  }

  startExercise(exerciseId: string) {
    /*  const userSelectedExercise = this.avaliableExercises.find(exercise => {
       return exercise.exerciseId === exerciseId;
     });
     this.currentlyRunningExercise = userSelectedExercise; */
    // *Shorthand
    this.currentlyRunningExercise = this.avaliableExercises.find(exercise => exercise.exerciseId === exerciseId);
    this.exerciseChanged.next({ ...this.currentlyRunningExercise });
  }

  getOnGoingTraining(): Exercise {
    return { ... this.currentlyRunningExercise };
  }

  exerciseCompleted() {
    this.completedHistoryExercises.push({
      ...this.currentlyRunningExercise,
      date: new Date(),
      exerciseState: 'completed'
    });

    this.historyChanged.next([...this.completedHistoryExercises]);
    this.currentlyRunningExercise = null;
    this.exerciseChanged.next(null);
  }

  exerciseCancelled(progress: number) {
    this.completedHistoryExercises.push({
      ...this.currentlyRunningExercise,
      exerciseDuration: this.currentlyRunningExercise.exerciseDuration * (progress / 100),
      caloriesBurned: this.currentlyRunningExercise.caloriesBurned * (progress / 100),
      date: new Date(),
      exerciseState: 'cancelled'
    });

    this.historyChanged.next([...this.completedHistoryExercises]);
    this.currentlyRunningExercise = null;
    this.exerciseChanged.next(null);
  }

  /*  getCompletedHistoryExercises(): Observable<Exercise[]> {
     return of([...this.completedHistoryExercises]);
   } */
  getCompletedHistoryExercises(): Exercise[] {
    return [...this.completedHistoryExercises];
  }





  fetchAvaliableExercise() {
    // !Importing from firebase db using AngularFire
    /*    this.db.collection('avaliableExercises')
         .valueChanges() // valueChanges -> Gives observable whenever value changes
         .subscribe((exercisesDocuments: Exercise[]) => {
           this.exercises = exercisesDocuments;
         }); */

    /*  this.$exercises = this.db.collection('avaliableExercises')
       .valueChanges() // valueChanges -> Gives observable whenever value changes
       .pipe(
         map((exercises: Exercise[]) => exercises)
       ); */

    // ! valueChanges() method will never give us the meta-data i.e- uniqueId generated by firebase db
    // ! but if we have a requirement to fetch the meta data then use : snapshotChanges()

    return this.db.collection('avaliableExercises')
      .snapshotChanges() // valueChanges -> Gives observable whenever value changes
      .pipe(
        map(docArray => { // this map is RxJs operator

          return docArray.map(document => { // this map is Array Ohbject map() method
            return {
              // ...document.payload.doc.data()
              exerciseId: document.payload.doc.id,
              exerciseName: document.payload.doc.data()['exerciseName'],
              exerciseDuration: document.payload.doc.data()['exerciseDuration'],
              caloriesBurned: document.payload.doc.data()['caloriesBurned'],
            };
          });

        }),
        tap((exer: Exercise[]) => this.avaliableExercises = exer)
      );
  }


}
